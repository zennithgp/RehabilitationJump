using UnityEngine;
using System.Collections;
using System.IO; //we're using input output for this game. Awesome!

public class InputOutputScript : MonoBehaviour {

	//ALL OF THESE ARE CONSTANTS SO TYPOS ARE CAUGHT EASILY


	private const char delim = '|'; //this is our delimiter. Unity will recognize it as a break between things.
	private const string PATH = "Assets/Once40End/"; //this is where we'll store our stories
	private const string FILE_NAME = "firstStory.txt"; //this is the name of the file
		//ideally, this would be initialized later on so players could create and name their own stories.
		//For this exercise, I'm just making one story.

	//I tried making a line break a delimiter. It didn't work as I intended.
	//	private const string delim = "\r\n";

	public string PLAYER_NAME = null; //this is the player's name.
		//ideally, I use this. If not, I tried.

	string input; //this is the most recent line read by our StreamReader

	// Use this for initialization
	void Start () {
		//create and populate a new story. This will erase an existing file.
		CreateNewStory ();

	}
	
	// Update is called once per frame
	void Update () {
	
	}

	void CreateNewStory(){
		//I'm using this to brute force create a new document
		StreamWriter sw = new StreamWriter (PATH + FILE_NAME, false);
		for (int i = 1; i < 41; i++) {
			//convert i into a stream. Research is awesome!
			string s = i.ToString ();
			if (i == 1) {
				//if it's the first line, we begin the story
				sw.WriteLine (s + ": Once Upon a Time," + delim);
			} else if (i == 40) {
				//if it's the last line, we end the story
				sw.WriteLine (s + ": The End." + delim);
			} else {
				//otherwise, we make a blank line
				sw.WriteLine (s + delim);
			}
		}
		sw.Close();
		Debug.Log ("Erased the old story.");


	}

	//Write to the desired line of text from the story file
	void WriteLine (string textInput, int lineNumber){

		//First, we need to a open a stream to the file.
		//It is FALSE, so it will replace the file, rather than append to the end.
		StreamWriter sw = new StreamWriter (PATH + FILE_NAME, false);
	

		//Write a line to the file.
		//We're using the delim to separate lines.
		sw.WriteLine (textInput + delim);

		//Then, we close our Stream Writer.
		sw.Close();
	}

	//Load the desired line of text from the story file
	void ReadLine (int lineNumber){

		//First, we need to open a stream to the file
		//The inputs are the file's path and file's name. Constant names are awesome.
		StreamReader sr = new StreamReader (PATH + FILE_NAME);

		//if we're trying to read something beyond the last line, we read the last line
		if (lineNumber > 39) {
			lineNumber = 39;
		}

		//We'll read the stream until we get to the desired line.
		//Remember that i is starting at 0. If we want to read line 37, we'll do so when i = 36.
		//We'll stop running this for loop once we've read the desired line.
		for (int i = 0; i < lineNumber; i++) {
			input = sr.ReadLine ();
		}


		//Read a line from the file
		//		Debug.Log("Line from file: " + sr.ReadLine()); //this is concatenating two strings

		//Split up a concatenated string
		string input = sr.ReadLine ();
		Debug.Log (input);
		string[] splitInput = input.Split(new char[]{delim});
		//single quotes means a character
		//double quotes means a string
		Debug.Log("Name: " + splitInput[0]); //this should just print out MAD

		//Once we're done writing, we close our stream
		sr.Close();

//		StreamReader sr = new StreamReader (PATH + FILE_NAME);
//		string initialInput = sr.ReadLine ();
//		Debug.Log ("Line 1 says: " + initialInput);
//		sr.Close ();


	}
}
